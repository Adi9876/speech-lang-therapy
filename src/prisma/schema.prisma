generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Supervisor {
    id                 String           @id @default(cuid())
    email              String           @unique
    name               String?
    token              String?
    tokenExpiry        DateTime?
    password           String?
    phone              String?
    department         String?
    assignedTherapists Therapist[]      @relation("SupervisorToTherapist")
    assignedPatients   Patient[]        @relation("SupervisorToPatient")
    progressReports    ProgressReport[]
    sessionLogs        SessionLog[]
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
}

model Therapist {
    id             String  @id @default(cuid())
    email          String  @unique
    name           String?
    password       String?
    phone          String?
    department     String?
    specialization String?
    city           String?
    state          String?
    workload       Int     @default(0)

    token       String?
    tokenExpiry DateTime?

    sessionLogs      SessionLog[]
    supervisorId     String?
    supervisor       Supervisor?  @relation("SupervisorToTherapist", fields: [supervisorId], references: [id])
    assignedPatients Patient[]    @relation("TherapistToPatient")

    rating Float?

    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    ProgressReport ProgressReport[]
}

model Patient {
    id             String  @id @default(cuid())
    email          String  @unique
    name           String?
    imageUrl       String?
    password       String?
    age            Int
    phone          String?
    city           String?
    state          String?
    medicalIssue   String
    medicalRecords String?

    token       String?
    tokenExpiry DateTime?

    therapistId     String?
    therapist       Therapist?       @relation("TherapistToPatient", fields: [therapistId], references: [id])
    sessionLogs     SessionLog[]
    supervisorId    String?
    supervisor      Supervisor?      @relation("SupervisorToPatient", fields: [supervisorId], references: [id])
    progressReports ProgressReport[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SessionLog {
    id   String   @id @default(cuid())
    date DateTime

    activities  String
    duration    String
    sessionType String
    status      String

    responses String?
    notes     String?

    patientFeedback String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    progressReportId String?
    patientId        String
    supervisorId     String?
    therapistId      String
    therapist        Therapist       @relation(fields: [therapistId], references: [id])
    patient          Patient         @relation(fields: [patientId], references: [id])
    ProgressReport   ProgressReport? @relation(fields: [progressReportId], references: [id])
    Supervisor       Supervisor?     @relation(fields: [supervisorId], references: [id])
}

model ProgressReport {
    id          String       @id @default(cuid())
    date        DateTime
    sessionLogs SessionLog[]

    recommendations  String
    summary          String
    challenges       String
    patientBehaviour String
    improvementAreas String
    goalsMet         String
    goalsUnmet       String

    supervisorFeedback          String?
    supervisorFeedbackOnPatient String?
    supervisorRatings           String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    supervisorId String?
    patientId    String
    therapistId  String
    therapist    Therapist   @relation(fields: [therapistId], references: [id])
    patient      Patient     @relation(fields: [patientId], references: [id])
    Supervisor   Supervisor? @relation(fields: [supervisorId], references: [id])
}
